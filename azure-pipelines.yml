# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- '*'

pool:
  vmImage: 'win1803'

strategy:
  matrix:
    GHC_8_4:
      ARGS: '--stack-yaml stack-ghc-8.4.yaml'
    GHC_8_6:
      ARGS: '--stack-yaml stack-ghc-8.6.yaml'
    GHC_8_8:
      ARGS: '--stack-yaml stack-ghc-8.8.yaml'

steps:
- pwsh: choco install --no-progress --yes postgresql
  displayName: 'Install PostgreSQL'

- pwsh: choco install --no-progress --yes haskell-stack
  displayName: 'Install stack'

- pwsh: |
    New-Item -ItemType Directory $HOME\.cabal
    Write-Host 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME\.cabal\config
    Write-Host 'remote-repo-cache: $HOME\.cabal\packages' >> $HOME\.cabal\config
  displayName: 'Use the more reliable S3 mirror of Hackage'

- pwsh: |
    $Env:PATH = "C:\Program Files\PostgreSQL\12\bin;$Env:PATH"
    if (Test-Path -PathType Leaf configure.ac) {
      autoreconf -i
    }
    # Add in extra-deps for older snapshots, as necessary
    #
    # This is disabled by default, as relying on the solver like this can
    # make builds unreliable. Instead, if you have this situation, it's
    # recommended that you maintain multiple stack-lts-X.yaml files.

    #stack --no-terminal --install-ghc $(ARGS) test --dry-run || ( \
    #  stack --no-terminal $(ARGS) build cabal-install && \
    #  stack --no-terminal $(ARGS) solver --update-config)

    # Build the dependencies
    stack --no-terminal --install-ghc $(ARGS) build --test --only-dependencies --bench --no-run-benchmarks
  displayName: 'Build the dependencies'

- pwsh: |
    $Env:PATH = "C:\Program Files\PostgreSQL\12\bin;$Env:PATH"
    stack --no-terminal $(ARGS) build --ghc-options -Werror --haddock --no-haddock-deps postgresql-pure:lib
  displayName: Build lib

- pwsh: |
    $Env:PATH = "C:\Program Files\PostgreSQL\12\bin;$Env:PATH"
    stack --no-terminal $(ARGS) build --ghc-options -Werror --no-run-tests postgresql-pure:test:doctest
  displayName: Build test:doctest

- pwsh: |
    $Env:PATH = "C:\Program Files\PostgreSQL\12\bin;$Env:PATH"
    stack --no-terminal $(ARGS) build --ghc-options -Werror --no-run-tests postgresql-pure:test:hdbc-postgresql
  displayName: Build test:hdbc-postgresql

- pwsh: |
    $Env:PATH = "C:\Program Files\PostgreSQL\12\bin;$Env:PATH"
    stack --no-terminal $(ARGS) build --ghc-options -Werror --no-run-tests postgresql-pure:test:original
  displayName: Build test:original

- pwsh: |
    $Env:PATH = "C:\Program Files\PostgreSQL\12\bin;$Env:PATH"
    stack --no-terminal $(ARGS) build --ghc-options -Werror --no-run-benchmarks postgresql-pure:bench:requests-per-second
  displayName: Build bench:requests-per-second

# needs a PostgreSQL server on compilation
#   - postgresql-pure:test:relational-record
#   - postgresql-pure:bench:requests-per-second-constant
